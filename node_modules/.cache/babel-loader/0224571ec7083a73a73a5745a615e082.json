{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\React\\\\AgriAI_WebApp-main-2\\\\AgriAI_WebApp-main\\\\React_Frontend\\\\agri-ai\\\\src\\\\components\\\\FertilizerRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FertilizerRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    Temparature: \"\",\n    Humidity: \"\",\n    Moisture: \"\",\n    soil_type: \"select\",\n    crop_type: \"select\",\n    Nitrogen: \"\",\n    Potassium: \"\",\n    Phosphorous: \"\"\n  });\n  const [predictionData, setPredictionData] = useState({});\n  const [loadingStatus, setLoadingStatus] = useState(false);\n  const classes = useStyles();\n  const formRenderData = [{\n    name: \"Nitrogen\",\n    description: \"Amount Of Nitrogen in Soil\"\n  }, {\n    name: \"Potassium\",\n    description: \"Amount of Potassium in Soil\"\n  }, {\n    name: \"Phosphorous\",\n    description: \"Amount of Phosphorous in Soil\"\n  }, {\n    name: \"Temparature\",\n    description: \"Temperature (in Celcius)\"\n  }, {\n    name: \"Humidity\",\n    description: \"Humidity (in %)\"\n  }, {\n    name: \"Moisture\",\n    description: \"Moisture in Soil\"\n  }];\n  const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey'];\n  const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts'];\n\n  const handleChange = (e, changeKey = undefined) => {\n    // console.log(changeKey, e.target.value)\n    let newData = { ...formData\n    };\n\n    if (changeKey) {\n      newData[changeKey] = e.target.value;\n    } else newData[e.target.id] = e.target.value;\n\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    const response = await api.post(\"/predict_fertilizer\", request);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  const handleBackClick = () => {\n    setPredictionData({});\n  };\n\n  const predictedFertilizer = fertilizerData[predictionData.final_prediction];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__form_group\",\n      children: [predictionData.error && /*#__PURE__*/_jsxDEV(Alert, {\n        style: {\n          marginTop: \"20px\"\n        },\n        severity: \"error\",\n        children: [\" \", predictionData.error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form__title\",\n          children: \"Fertilizer Recommender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), formRenderData.map(formAttribute => {\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData[formAttribute.name],\n          className: \"form__text_field\",\n          id: formAttribute.name,\n          name: formAttribute.name,\n          variant: \"filled\",\n          label: formAttribute.description\n        }, formAttribute.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 32\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"soil_type\",\n        name: \"soil_type\",\n        select: true,\n        label: \"Soil Type\",\n        value: formData.soil_type,\n        onChange: e => handleChange(e, \"soil_type\"),\n        SelectProps: {\n          native: true\n        },\n        variant: \"filled\",\n        className: \"form__text_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"select\",\n          children: \"Select\"\n        }, \"select\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), soilTypes.map(soiltype => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: soiltype,\n          children: soiltype\n        }, soiltype, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"soil_type\",\n        name: \"soil_type\",\n        select: true,\n        label: \"Crop Type\",\n        value: formData.crop_type,\n        onChange: e => handleChange(e, \"crop_type\"),\n        SelectProps: {\n          native: true\n        },\n        variant: \"filled\",\n        className: \"form__text_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"select\",\n          children: \"Select\"\n        }, \"select\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), cropTypes.map(croptype => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: croptype,\n          children: croptype\n        }, croptype, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClick(),\n        className: \"form__button\",\n        color: \"primary\",\n        variant: \"contained\",\n        children: \"Predict Fertilizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FertilizerRecommender, \"bvCR0gaMYNTcwYMQlawOUueexlw=\", true);\n\n_c = FertilizerRecommender;\nexport default FertilizerRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"FertilizerRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/React/AgriAI_WebApp-main-2/AgriAI_WebApp-main/React_Frontend/agri-ai/src/components/FertilizerRecommender.js"],"names":["React","useState","Button","TextField","api","makeStyles","Alert","FertilizerRecommender","formData","setFormData","Temparature","Humidity","Moisture","soil_type","crop_type","Nitrogen","Potassium","Phosphorous","predictionData","setPredictionData","loadingStatus","setLoadingStatus","classes","useStyles","formRenderData","name","description","soilTypes","cropTypes","handleChange","e","changeKey","undefined","newData","target","value","id","handleClick","request","FormData","key","append","response","post","responseData","data","handleBackClick","predictedFertilizer","fertilizerData","final_prediction","error","marginTop","map","formAttribute","native","soiltype","croptype"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;AAGA,SAASC,qBAAT,GAAiC;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AACrCS,IAAAA,WAAW,EAAC,EADyB;AAErCC,IAAAA,QAAQ,EAAC,EAF4B;AAGrCC,IAAAA,QAAQ,EAAC,EAH4B;AAIrCC,IAAAA,SAAS,EAAC,QAJ2B;AAKrCC,IAAAA,SAAS,EAAC,QAL2B;AAMrCC,IAAAA,QAAQ,EAAC,EAN4B;AAOrCC,IAAAA,SAAS,EAAC,EAP2B;AAQrCC,IAAAA,WAAW,EAAC;AARyB,GAAD,CAAxC;AAWA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMqB,OAAO,GAAGC,SAAS,EAAzB;AAGA,QAAMC,cAAc,GAAG,CACnB;AACGC,IAAAA,IAAI,EAAC,UADR;AAEGC,IAAAA,WAAW,EAAC;AAFf,GADmB,EAKnB;AACID,IAAAA,IAAI,EAAC,WADT;AAEIC,IAAAA,WAAW,EAAC;AAFhB,GALmB,EASlB;AACGD,IAAAA,IAAI,EAAC,aADR;AAEGC,IAAAA,WAAW,EAAC;AAFf,GATkB,EAalB;AACGD,IAAAA,IAAI,EAAC,aADR;AAEGC,IAAAA,WAAW,EAAC;AAFf,GAbkB,EAiBlB;AACGD,IAAAA,IAAI,EAAC,UADR;AAEGC,IAAAA,WAAW,EAAC;AAFf,GAjBkB,EAqBlB;AACGD,IAAAA,IAAI,EAAC,UADR;AAEGC,IAAAA,WAAW,EAAC;AAFf,GArBkB,CAAvB;AA2BA,QAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,KAA5B,EAAmC,QAAnC,CAAlB;AACA,QAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,OAA5C,EAAqD,QAArD,EAA+D,OAA/D,EAAwE,SAAxE,EAAmF,WAAnF,EAAgG,QAAhG,EAA0G,aAA1G,CAAlB;;AAEA,QAAMC,YAAY,GAAG,CAACC,CAAD,EAAIC,SAAS,GAACC,SAAd,KAA4B;AAC7C;AACA,QAAIC,OAAO,GAAG,EAAC,GAAGzB;AAAJ,KAAd;;AACA,QAAGuB,SAAH,EAAc;AACVE,MAAAA,OAAO,CAACF,SAAD,CAAP,GAAqBD,CAAC,CAACI,MAAF,CAASC,KAA9B;AACH,KAFD,MAGKF,OAAO,CAACH,CAAC,CAACI,MAAF,CAASE,EAAV,CAAP,GAAuBN,CAAC,CAACI,MAAF,CAASC,KAAhC;;AACL1B,IAAAA,WAAW,CAACwB,OAAD,CAAX;AACH,GARD;;AAUA,QAAMI,WAAW,GAAG,YAAY;AAE5BhB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,UAAMiB,OAAO,GAAG,IAAIC,QAAJ,EAAhB;;AAEA,SAAI,IAAIC,GAAR,IAAehC,QAAf,EAAyB;AACrB8B,MAAAA,OAAO,CAACG,MAAR,CAAeD,GAAf,EAAoBhC,QAAQ,CAACgC,GAAD,CAA5B;AACH;;AAED,UAAME,QAAQ,GAAG,MAAMtC,GAAG,CAACuC,IAAJ,CACnB,qBADmB,EAEnBL,OAFmB,CAAvB;AAKA,UAAMM,YAAY,GAAGF,QAAQ,CAACG,IAA9B;AACA1B,IAAAA,iBAAiB,CAACyB,YAAD,CAAjB;AACAvB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAlBD;;AAoBA,QAAMyB,eAAe,GAAG,MAAM;AAC1B3B,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH,GAFD;;AAIA,QAAM4B,mBAAmB,GAAGC,cAAc,CAAC9B,cAAc,CAAC+B,gBAAhB,CAA1C;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,iBAGQ/B,cAAc,CAACgC,KAAf,iBACA,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAC;AAAX,SAAd;AAAkC,QAAA,QAAQ,EAAC,OAA3C;AAAA,wBAAsDjC,cAAc,CAACgC,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA,cAJR,eAOI;AAAA,+BAAQ;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;AAAA,cAPJ,EAUQ1B,cAAc,CAAC4B,GAAf,CAAoBC,aAAD,IAAmB;AAClC,4BAAO,QAAC,SAAD;AAEP,UAAA,QAAQ,EAAGvB,CAAD,IAAOD,YAAY,CAACC,CAAD,CAFtB;AAGP,UAAA,KAAK,EAAEtB,QAAQ,CAAC6C,aAAa,CAAC5B,IAAf,CAHR;AAIP,UAAA,SAAS,EAAC,kBAJH;AAKP,UAAA,EAAE,EAAE4B,aAAa,CAAC5B,IALX;AAMP,UAAA,IAAI,EAAE4B,aAAa,CAAC5B,IANb;AAOP,UAAA,OAAO,EAAC,QAPD;AAQP,UAAA,KAAK,EAAE4B,aAAa,CAAC3B;AARd,WACF2B,aAAa,CAAC5B,IADZ;AAAA;AAAA;AAAA;AAAA,gBAAP;AAUH,OAXD,CAVR,eAyBI,QAAC,SAAD;AACI,QAAA,EAAE,EAAC,WADP;AAEI,QAAA,IAAI,EAAC,WAFT;AAGI,QAAA,MAAM,MAHV;AAII,QAAA,KAAK,EAAC,WAJV;AAKI,QAAA,KAAK,EAAEjB,QAAQ,CAACK,SALpB;AAMI,QAAA,QAAQ,EAAGiB,CAAD,IAAOD,YAAY,CAACC,CAAD,EAAI,WAAJ,CANjC;AAOI,QAAA,WAAW,EAAE;AACTwB,UAAAA,MAAM,EAAE;AADC,SAPjB;AAUI,QAAA,OAAO,EAAC,QAVZ;AAWI,QAAA,SAAS,EAAC,kBAXd;AAAA,gCAaI;AAAuB,UAAA,KAAK,EAAE,QAA9B;AAAA,oBACC;AADD,WAAa,QAAb;AAAA;AAAA;AAAA;AAAA,gBAbJ,EAgBK3B,SAAS,CAACyB,GAAV,CAAeG,QAAD,iBACX;AAAuB,UAAA,KAAK,EAAEA,QAA9B;AAAA,oBACCA;AADD,WAAaA,QAAb;AAAA;AAAA;AAAA;AAAA,gBADH,CAhBL;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBJ,eAiDI,QAAC,SAAD;AACI,QAAA,EAAE,EAAC,WADP;AAEI,QAAA,IAAI,EAAC,WAFT;AAGI,QAAA,MAAM,MAHV;AAII,QAAA,KAAK,EAAC,WAJV;AAKI,QAAA,KAAK,EAAE/C,QAAQ,CAACM,SALpB;AAMI,QAAA,QAAQ,EAAGgB,CAAD,IAAOD,YAAY,CAACC,CAAD,EAAI,WAAJ,CANjC;AAOI,QAAA,WAAW,EAAE;AACTwB,UAAAA,MAAM,EAAE;AADC,SAPjB;AAUI,QAAA,OAAO,EAAC,QAVZ;AAWI,QAAA,SAAS,EAAC,kBAXd;AAAA,gCAaI;AAAuB,UAAA,KAAK,EAAE,QAA9B;AAAA,oBACC;AADD,WAAa,QAAb;AAAA;AAAA;AAAA;AAAA,gBAbJ,EAgBK1B,SAAS,CAACwB,GAAV,CAAeI,QAAD,iBACX;AAAuB,UAAA,KAAK,EAAEA,QAA9B;AAAA,oBACCA;AADD,WAAaA,QAAb;AAAA;AAAA;AAAA;AAAA,gBADH,CAhBL;AAAA;AAAA;AAAA;AAAA;AAAA,cAjDJ,eAwEI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAInB,WAAW,EAAhC;AAAoC,QAAA,SAAS,EAAC,cAA9C;AAA6D,QAAA,KAAK,EAAC,SAAnE;AAA6E,QAAA,OAAO,EAAC,WAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8EH;;GAnKQ9B,qB;;KAAAA,qB;AAqKT,eAAeA,qBAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\n\n\nfunction FertilizerRecommender() {\n    const [formData, setFormData] = useState({\n        Temparature:\"\",\n        Humidity:\"\",\n        Moisture:\"\",\n        soil_type:\"select\",\n        crop_type:\"select\",\n        Nitrogen:\"\",\n        Potassium:\"\",\n        Phosphorous:\"\",\n    })\n\n    const [predictionData, setPredictionData] = useState({})\n\n    const [loadingStatus, setLoadingStatus] = useState(false)\n    \n    const classes = useStyles();\n\n\n    const formRenderData = [\n        {\n           name:\"Nitrogen\",\n           description:\"Amount Of Nitrogen in Soil\"\n        },\n        {\n            name:\"Potassium\",\n            description:\"Amount of Potassium in Soil\"\n         },\n         {\n            name:\"Phosphorous\",\n            description:\"Amount of Phosphorous in Soil\"\n         },\n         {\n            name:\"Temparature\",\n            description:\"Temperature (in Celcius)\"\n         },\n         {\n            name:\"Humidity\",\n            description:\"Humidity (in %)\"\n         },\n         {\n            name:\"Moisture\",\n            description:\"Moisture in Soil\"\n         }\n    ]\n\n    const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey']\n    const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts']\n\n    const handleChange = (e, changeKey=undefined) => {\n        // console.log(changeKey, e.target.value)\n        let newData = {...formData}\n        if(changeKey) {\n            newData[changeKey] = e.target.value\n        }\n        else newData[e.target.id] = e.target.value\n        setFormData(newData)\n    }\n\n    const handleClick = async () => {\n\n        setLoadingStatus(true)\n        \n        const request = new FormData()\n\n        for(let key in formData) {\n            request.append(key, formData[key])\n        }\n\n        const response = await api.post(\n            \"/predict_fertilizer\",\n            request\n        )\n        \n        const responseData = response.data\n        setPredictionData(responseData)\n        setLoadingStatus(false)\n    }\n\n    const handleBackClick = () => {\n        setPredictionData({})\n    }\n\n    const predictedFertilizer = fertilizerData[predictionData.final_prediction]\n\n    return (\n        <div className=\"form\">\n            <div className=\"form__form_group\">\n\n                {\n                    predictionData.error && \n                    <Alert style={{marginTop:\"20px\"}} severity=\"error\"> { predictionData.error } </Alert>\n                }\n\n                <center><div className=\"form__title\">Fertilizer Recommender</div></center>\n\n                {\n                    formRenderData.map((formAttribute) => {\n                        return <TextField\n                        key={formAttribute.name} \n                        onChange={(e) => handleChange(e)}\n                        value={formData[formAttribute.name]}\n                        className=\"form__text_field\"\n                        id={formAttribute.name}\n                        name={formAttribute.name}\n                        variant=\"filled\"\n                        label={formAttribute.description}\n                        />\n                    })\n                }\n\n\n                <TextField\n                    id=\"soil_type\"\n                    name=\"soil_type\"\n                    select\n                    label=\"Soil Type\"\n                    value={formData.soil_type}\n                    onChange={(e) => handleChange(e, \"soil_type\")}\n                    SelectProps={{\n                        native: true,\n                    }}\n                    variant=\"filled\"\n                    className=\"form__text_field\"\n                    >\n                    <option key={\"select\"} value={\"select\"}>\n                    {\"Select\"}\n                    </option>\n                    {soilTypes.map((soiltype) => (\n                        <option key={soiltype} value={soiltype}>\n                        {soiltype}\n                        </option>\n                    ))}\n                </TextField>\n\n\n                <TextField\n                    id=\"soil_type\"\n                    name=\"soil_type\"\n                    select\n                    label=\"Crop Type\"\n                    value={formData.crop_type}\n                    onChange={(e) => handleChange(e, \"crop_type\")}\n                    SelectProps={{\n                        native: true,\n                    }}\n                    variant=\"filled\"\n                    className=\"form__text_field\"\n                    >\n                    <option key={\"select\"} value={\"select\"}>\n                    {\"Select\"}\n                    </option>\n                    {cropTypes.map((croptype) => (\n                        <option key={croptype} value={croptype}>\n                        {croptype}\n                        </option>\n                    ))}\n                </TextField>\n\n                <Button onClick={()=>handleClick()} className=\"form__button\" color=\"primary\" variant=\"contained\">Predict Fertilizer</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default FertilizerRecommender\n"]},"metadata":{},"sourceType":"module"}