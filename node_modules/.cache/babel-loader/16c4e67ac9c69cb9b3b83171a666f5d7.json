{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\React\\\\AgriAI_WebApp-main-2\\\\AgriAI_WebApp-main\\\\React_Frontend\\\\agri-ai\\\\src\\\\components\\\\CropRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\";\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport \"../styles/croprecommenderoutput.css\";\nimport { cropData } from \"./Data\";\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 550\n  },\n  table: {\n    minWidth: 450\n  }\n});\n\nfunction CropRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    N: \"\",\n    P: \"\",\n    K: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    ph: \"\",\n    rainfall: \"\"\n  });\n  const [predictionData, setPredictionData] = useState({});\n  const [loadingStatus, setLoadingStatus] = useState(false);\n\n  const handleChange = e => {\n    let newData = { ...formData\n    };\n    newData[e.target.id] = e.target.value;\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    const response = await api.post(\"/predict_crop\", request);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  const handleBackClick = () => {\n    setPredictionData({});\n  };\n\n  const classes = useStyles();\n  const predictedCrop = cropData[predictionData.final_prediction];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: `url(${process.env.PUBLIC_URL + 'assets/B2.jpg'})`\n      },\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__form_group\",\n        children: [predictionData.error && /*#__PURE__*/_jsxDEV(Alert, {\n          style: {\n            marginTop: \"20px\"\n          },\n          severity: \"error\",\n          children: [\" \", predictionData.error, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__title\",\n            children: \"Crop Recommender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.N,\n          className: \"form__text_field\",\n          id: \"N\",\n          name: \"N\",\n          variant: \"filled\",\n          label: \"Amount of Nitrogen in Soil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.P,\n          className: \"form__text_field\",\n          id: \"P\",\n          name: \"P\",\n          variant: \"filled\",\n          label: \"Amount of Phosphorous in Soil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.K,\n          className: \"form__text_field\",\n          id: \"K\",\n          name: \"K\",\n          variant: \"filled\",\n          label: \"Amount of Pottasium in Soil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.temperature,\n          className: \"form__text_field\",\n          id: \"temperature\",\n          name: \"temperature\",\n          variant: \"filled\",\n          label: \"Temperature (in Celcius)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.humidity,\n          className: \"form__text_field\",\n          id: \"humidity\",\n          name: \"humidity\",\n          variant: \"filled\",\n          label: \"Humidity (in %)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.ph,\n          className: \"form__text_field\",\n          id: \"ph\",\n          name: \"ph\",\n          variant: \"filled\",\n          label: \"pH value of Soil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.rainfall,\n          className: \"form__text_field\",\n          id: \"rainfall\",\n          name: \"rainfall\",\n          variant: \"filled\",\n          label: \"Rainfall (in mm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(),\n          className: \"form__button\",\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Predict Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CropRecommender, \"tJeWosVvt9bKuL1++u2QNbXRKMg=\", false, function () {\n  return [useStyles];\n});\n\n_c = CropRecommender;\nexport default CropRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/React/AgriAI_WebApp-main-2/AgriAI_WebApp-main/React_Frontend/agri-ai/src/components/CropRecommender.js"],"names":["React","useState","Button","TextField","api","Alert","makeStyles","Card","CardActions","CardContent","CardMedia","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","cropData","Loading","useStyles","root","maxWidth","table","minWidth","CropRecommender","formData","setFormData","N","P","K","temperature","humidity","ph","rainfall","predictionData","setPredictionData","loadingStatus","setLoadingStatus","handleChange","e","newData","target","id","value","handleClick","request","FormData","key","append","response","post","responseData","data","handleBackClick","classes","predictedCrop","final_prediction","backgroundImage","process","env","PUBLIC_URL","error","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\"\nimport Alert from '@material-ui/lab/Alert';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport \"../styles/croprecommenderoutput.css\"\nimport {cropData} from \"./Data\"\nimport Loading from './Loading';\n\n\n\n\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 550,\n    },\n    table: {\n        minWidth: 450,\n    },\n});\n\n\nfunction CropRecommender() {\n\n    const [formData, setFormData] = useState({\n        N:\"\",\n        P:\"\",\n        K:\"\",\n        temperature:\"\",\n        humidity:\"\",\n        ph:\"\",\n        rainfall:\"\"\n    })\n\n    const [predictionData, setPredictionData] = useState({})\n\n    const [loadingStatus, setLoadingStatus] = useState(false)\n\n    const handleChange = (e) => {\n        let newData = {...formData}\n        newData[e.target.id] = e.target.value\n        setFormData(newData)\n    }\n\n    const handleClick = async () => {\n\n        setLoadingStatus(true)\n        \n        const request = new FormData()\n\n        for(let key in formData) {\n            request.append(key, formData[key])\n        }\n\n        const response = await api.post(\n            \"/predict_crop\",\n            request\n        )\n        \n        const responseData = response.data\n        setPredictionData(responseData)\n        setLoadingStatus(false)\n    }\n\n    const handleBackClick = () => {\n        setPredictionData({})\n    }\n\n    const classes = useStyles();\n\n    const predictedCrop = cropData[predictionData.final_prediction]\n\n\n    return (\n        <div className=\"form\">\n            <div style={{backgroundImage:`url(${process.env.PUBLIC_URL + 'assets/B2.jpg'})`}} className=\"container\">\n                <div className=\"form__form_group\">\n\n                    {\n                        predictionData.error && \n                        <Alert style={{marginTop:\"20px\"}} severity=\"error\"> { predictionData.error } </Alert>\n                    }\n\n                    <center><div className=\"form__title\">Crop Recommender</div></center>\n                    <TextField onChange={(e) => handleChange(e)} value={formData.N} className=\"form__text_field\" id=\"N\" name=\"N\" variant=\"filled\" label=\"Amount of Nitrogen in Soil\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.P} className=\"form__text_field\" id=\"P\" name=\"P\" variant=\"filled\" label=\"Amount of Phosphorous in Soil\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.K} className=\"form__text_field\" id=\"K\" name=\"K\" variant=\"filled\" label=\"Amount of Pottasium in Soil\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.temperature} className=\"form__text_field\" id=\"temperature\" name=\"temperature\" variant=\"filled\" label=\"Temperature (in Celcius)\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.humidity} className=\"form__text_field\" id=\"humidity\" name=\"humidity\" variant=\"filled\" label=\"Humidity (in %)\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.ph} className=\"form__text_field\" id=\"ph\" name=\"ph\" variant=\"filled\" label=\"pH value of Soil\" />\n                    <TextField onChange={(e) => handleChange(e)} value={formData.rainfall} className=\"form__text_field\" id=\"rainfall\" name=\"rainfall\" variant=\"filled\" label=\"Rainfall (in mm)\" />\n\n                    <Button onClick={()=>handleClick()} className=\"form__button\" color=\"primary\" variant=\"contained\">Predict Crop</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CropRecommender\n"]},"metadata":{},"sourceType":"module"}