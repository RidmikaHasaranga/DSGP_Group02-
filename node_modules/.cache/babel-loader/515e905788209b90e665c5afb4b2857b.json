{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\All in One\\\\DSGP_Group02-\\\\src\\\\components\\\\CropRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\";\nimport Alert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CropRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    N: \"\",\n    P: \"\",\n    K: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    ph: \"\",\n    rainfall: \"\"\n  });\n  const [predictionData, setPredictionData] = useState(null);\n  const [loadingStatus, setLoadingStatus] = useState(false);\n\n  const handleChange = e => {\n    let newData = { ...formData\n    };\n    newData[e.target.id] = e.target.value;\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    console.log(request);\n    console.log(\"formData:\", formData);\n    const response = await api.post(\"/crop\", formData);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + 'assets/CropRecomender.jpg'})`\n    },\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__form_group\",\n        children: [predictionData && /*#__PURE__*/_jsxDEV(Alert, {\n          style: {\n            marginTop: \"20px\"\n          },\n          children: [\" \", predictionData.crop, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__title\",\n            children: \"Crop Recommender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.N,\n          className: \"form__text_field\",\n          id: \"N\",\n          name: \"N\",\n          variant: \"filled\",\n          label: \"Amount of Nitrogen in Soil\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.P,\n          className: \"form__text_field\",\n          id: \"P\",\n          name: \"P\",\n          variant: \"filled\",\n          label: \"Amount of Phosphorous in Soil\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.K,\n          className: \"form__text_field\",\n          id: \"K\",\n          name: \"K\",\n          variant: \"filled\",\n          label: \"Amount of Pottasium in Soil\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.temperature,\n          className: \"form__text_field\",\n          id: \"temperature\",\n          name: \"temperature\",\n          variant: \"filled\",\n          label: \"Temperature (in Celcius)\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.humidity,\n          className: \"form__text_field\",\n          id: \"humidity\",\n          name: \"humidity\",\n          variant: \"filled\",\n          label: \"Humidity (in %)\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.ph,\n          className: \"form__text_field\",\n          id: \"ph\",\n          name: \"ph\",\n          variant: \"filled\",\n          label: \"pH value of Soil\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => handleChange(e),\n          value: formData.rainfall,\n          className: \"form__text_field\",\n          id: \"rainfall\",\n          name: \"rainfall\",\n          variant: \"filled\",\n          label: \"Rainfall (in mm)\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(),\n          className: \"form__button\",\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Predict Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CropRecommender, \"/sh7NytDlLIjKzbmXyVKRg2j3Y8=\");\n\n_c = CropRecommender;\nexport default CropRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/All in One/DSGP_Group02-/src/components/CropRecommender.js"],"names":["React","useState","Button","TextField","api","Alert","CropRecommender","formData","setFormData","N","P","K","temperature","humidity","ph","rainfall","predictionData","setPredictionData","loadingStatus","setLoadingStatus","handleChange","e","newData","target","id","value","handleClick","request","FormData","key","append","console","log","response","post","responseData","data","backgroundImage","process","env","PUBLIC_URL","marginTop","crop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport api from \"../api/recommenderapi\"\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nfunction CropRecommender() {\r\n\r\n    const [formData, setFormData] = useState({\r\n        N:\"\",\r\n        P:\"\",\r\n        K:\"\",\r\n        temperature:\"\",\r\n        humidity:\"\",\r\n        ph:\"\",\r\n        rainfall:\"\"\r\n    })\r\n\r\n    const [predictionData, setPredictionData] = useState(null)\r\n\r\n    const [loadingStatus, setLoadingStatus] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        let newData = {...formData}\r\n        newData[e.target.id] = e.target.value\r\n        setFormData(newData)\r\n    }\r\n\r\n    const handleClick = async () => {\r\n\r\n        setLoadingStatus(true)\r\n        \r\n        const request = new FormData()\r\n\r\n        for(let key in formData) {\r\n            request.append(key, formData[key])\r\n        }\r\n\r\n        console.log(request);\r\n        console.log(\"formData:\", formData);\r\n\r\n        const response = await api.post(\"/crop\", formData)\r\n        \r\n        const responseData = response.data\r\n        setPredictionData(responseData)\r\n        setLoadingStatus(false)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundImage:`url(${process.env.PUBLIC_URL + 'assets/CropRecomender.jpg'})`}} className=\"container\">\r\n            <div className=\"form\">\r\n                <div className=\"form__form_group\">\r\n\r\n                    {\r\n                        predictionData && \r\n                        <Alert style={{marginTop:\"20px\"}} > { predictionData.crop } </Alert>\r\n                    }\r\n\r\n                    <center><div className=\"form__title\">Crop Recommender</div></center>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.N} className=\"form__text_field\" id=\"N\" name=\"N\" variant=\"filled\" label=\"Amount of Nitrogen in Soil\" type=\"number\" />\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.P} className=\"form__text_field\" id=\"P\" name=\"P\" variant=\"filled\" label=\"Amount of Phosphorous in Soil\" type=\"number\"/>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.K} className=\"form__text_field\" id=\"K\" name=\"K\" variant=\"filled\" label=\"Amount of Pottasium in Soil\" type=\"number\"/>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.temperature} className=\"form__text_field\" id=\"temperature\" name=\"temperature\" variant=\"filled\" label=\"Temperature (in Celcius)\" type=\"number\"/>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.humidity} className=\"form__text_field\" id=\"humidity\" name=\"humidity\" variant=\"filled\" label=\"Humidity (in %)\" type=\"number\"/>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.ph} className=\"form__text_field\" id=\"ph\" name=\"ph\" variant=\"filled\" label=\"pH value of Soil\" type=\"number\"/>\r\n                    <TextField onChange={(e) => handleChange(e)} value={formData.rainfall} className=\"form__text_field\" id=\"rainfall\" name=\"rainfall\" variant=\"filled\" label=\"Rainfall (in mm)\" type=\"number\"/>\r\n\r\n                    <Button onClick={()=>handleClick()} className=\"form__button\" color=\"primary\" variant=\"contained\">Predict Crop</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CropRecommender\r\n"]},"metadata":{},"sourceType":"module"}