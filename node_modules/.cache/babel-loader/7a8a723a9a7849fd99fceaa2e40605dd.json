{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\All in One\\\\DSGP_Group02-\\\\src\\\\components\\\\FertilizerRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport api from \"../api/recommenderapi\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport \"../styles/croprecommenderoutput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FertilizerRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    Temparature: \"\",\n    Humidity: \"\",\n    Moisture: \"\",\n    soil_type: \"select\",\n    crop_type: \"select\",\n    Nitrogen: \"\",\n    Potassium: \"\",\n    Phosphorous: \"\"\n  });\n  const [predictionData, setPredictionData] = useState(null);\n  const [loadingStatus, setLoadingStatus] = useState(false);\n  const formRenderData = [{\n    name: \"Nitrogen\",\n    description: \"Amount Of Nitrogen in Soil\"\n  }, {\n    name: \"Potassium\",\n    description: \"Amount of Potassium in Soil\"\n  }, {\n    name: \"Phosphorous\",\n    description: \"Amount of Phosphorous in Soil\"\n  }, {\n    name: \"Temparature\",\n    description: \"Temperature (in Celcius)\"\n  }, {\n    name: \"Humidity\",\n    description: \"Humidity (in %)\"\n  }, {\n    name: \"Moisture\",\n    description: \"Moisture in Soil\"\n  }];\n  const soilTypes = [\"Sandy\", \"Loamy\", \"Black\", \"Red\", \"Clayey\"];\n  const cropTypes = [\"Maize\", \"Sugarcane\", \"Cotton\", \"Tobacco\", \"Paddy\", \"Barley\", \"Wheat\", \"Millets\", \"Oil seeds\", \"Pulses\", \"Ground Nuts\"];\n\n  const handleChange = (e, changeKey = undefined) => {\n    // console.log(changeKey, e.target.value)\n    let newData = { ...formData\n    };\n\n    if (changeKey) {\n      newData[changeKey] = e.target.value;\n    } else newData[e.target.id] = e.target.value;\n\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    console.log(formData);\n    const response = await api.post(\"/fertilizer\", formData);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + \"assets/FertilizerRecomender.jpg\"})`\n    },\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__form_group\",\n        children: [predictionData && /*#__PURE__*/_jsxDEV(Alert, {\n          style: {\n            marginTop: \"20px\"\n          },\n          children: [predictionData.crop, predictionData.fertilizer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__title\",\n            children: \"Fertilizer Recommender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), formRenderData.map(formAttribute => {\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => handleChange(e),\n            value: formData[formAttribute.name],\n            className: \"form__text_field\",\n            id: formAttribute.name,\n            name: formAttribute.name,\n            variant: \"filled\",\n            label: formAttribute.description\n          }, formAttribute.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"soil_type\",\n          name: \"soil_type\",\n          select: true,\n          label: \"Soil Type\",\n          value: formData.soil_type,\n          onChange: e => handleChange(e, \"soil_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), soilTypes.map(soiltype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: soiltype,\n            children: soiltype\n          }, soiltype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"crop_type\",\n          name: \"crop_type\",\n          select: true,\n          label: \"Crop Type\",\n          value: formData.crop_type,\n          onChange: e => handleChange(e, \"crop_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), cropTypes.map(croptype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: croptype,\n            children: croptype\n          }, croptype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(),\n          className: \"form__button\",\n          style: {\n            backgroundColor: '#077329'\n          },\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Predict Fertilizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FertilizerRecommender, \"hI1wKbmGQOOjY4LacR4Z5H+xJRE=\");\n\n_c = FertilizerRecommender;\nexport default FertilizerRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"FertilizerRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/All in One/DSGP_Group02-/src/components/FertilizerRecommender.js"],"names":["React","useState","Button","TextField","api","Alert","FertilizerRecommender","formData","setFormData","Temparature","Humidity","Moisture","soil_type","crop_type","Nitrogen","Potassium","Phosphorous","predictionData","setPredictionData","loadingStatus","setLoadingStatus","formRenderData","name","description","soilTypes","cropTypes","handleChange","e","changeKey","undefined","newData","target","value","id","handleClick","request","FormData","key","append","console","log","response","post","responseData","data","backgroundImage","process","env","PUBLIC_URL","marginTop","crop","fertilizer","map","formAttribute","native","soiltype","croptype","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport api from \"../api/recommenderapi\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport \"../styles/croprecommenderoutput.css\";\r\n\r\nfunction FertilizerRecommender() {\r\n  const [formData, setFormData] = useState({\r\n    Temparature: \"\",\r\n    Humidity: \"\",\r\n    Moisture: \"\",\r\n    soil_type: \"select\",\r\n    crop_type: \"select\",\r\n    Nitrogen: \"\",\r\n    Potassium: \"\",\r\n    Phosphorous: \"\",\r\n  });\r\n\r\n  const [predictionData, setPredictionData] = useState(null);\r\n\r\n  const [loadingStatus, setLoadingStatus] = useState(false);\r\n\r\n  const formRenderData = [\r\n    {\r\n      name: \"Nitrogen\",\r\n      description: \"Amount Of Nitrogen in Soil\",\r\n    },\r\n    {\r\n      name: \"Potassium\",\r\n      description: \"Amount of Potassium in Soil\",\r\n    },\r\n    {\r\n      name: \"Phosphorous\",\r\n      description: \"Amount of Phosphorous in Soil\",\r\n    },\r\n    {\r\n      name: \"Temparature\",\r\n      description: \"Temperature (in Celcius)\",\r\n    },\r\n    {\r\n      name: \"Humidity\",\r\n      description: \"Humidity (in %)\",\r\n    },\r\n    {\r\n      name: \"Moisture\",\r\n      description: \"Moisture in Soil\",\r\n    },\r\n  ];\r\n\r\n  const soilTypes = [\"Sandy\", \"Loamy\", \"Black\", \"Red\", \"Clayey\"];\r\n  const cropTypes = [\r\n    \"Maize\",\r\n    \"Sugarcane\",\r\n    \"Cotton\",\r\n    \"Tobacco\",\r\n    \"Paddy\",\r\n    \"Barley\",\r\n    \"Wheat\",\r\n    \"Millets\",\r\n    \"Oil seeds\",\r\n    \"Pulses\",\r\n    \"Ground Nuts\",\r\n  ];\r\n\r\n  const handleChange = (e, changeKey = undefined) => {\r\n    // console.log(changeKey, e.target.value)\r\n    let newData = { ...formData };\r\n    if (changeKey) {\r\n      newData[changeKey] = e.target.value;\r\n    } else newData[e.target.id] = e.target.value;\r\n    setFormData(newData);\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    setLoadingStatus(true);\r\n\r\n    const request = new FormData();\r\n\r\n    for (let key in formData) {\r\n      request.append(key, formData[key]);\r\n    }\r\n\r\n    console.log(formData)\r\n\r\n    const response = await api.post(\"/fertilizer\", formData);\r\n\r\n    const responseData = response.data;\r\n    setPredictionData(responseData);\r\n    setLoadingStatus(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${\r\n          process.env.PUBLIC_URL + \"assets/FertilizerRecomender.jpg\"\r\n        })`,\r\n      }}\r\n      className=\"container\"\r\n    >\r\n      <div className=\"form\">\r\n        <div className=\"form__form_group\">\r\n          {predictionData && (\r\n            <Alert style={{ marginTop: \"20px\" }} >\r\n\r\n              {predictionData.crop}\r\n\r\n               {predictionData.fertilizer}\r\n            </Alert>\r\n          )}\r\n\r\n          <center>\r\n            <div className=\"form__title\">Fertilizer Recommender</div>\r\n          </center>\r\n\r\n          {formRenderData.map((formAttribute) => {\r\n            return (\r\n              <TextField\r\n                key={formAttribute.name}\r\n                onChange={(e) => handleChange(e)}\r\n                value={formData[formAttribute.name]}\r\n                className=\"form__text_field\"\r\n                id={formAttribute.name}\r\n                name={formAttribute.name}\r\n                variant=\"filled\"\r\n                label={formAttribute.description}\r\n              />\r\n            );\r\n          })}\r\n\r\n          <TextField\r\n            id=\"soil_type\"\r\n            name=\"soil_type\"\r\n            select\r\n            label=\"Soil Type\"\r\n            value={formData.soil_type}\r\n            onChange={(e) => handleChange(e, \"soil_type\")}\r\n            SelectProps={{\r\n              native: true,\r\n            }}\r\n            variant=\"filled\"\r\n            className=\"form__text_field\"\r\n          >\r\n            <option key={\"select\"} value={\"select\"}>\r\n              {\"Select\"}\r\n            </option>\r\n            {soilTypes.map((soiltype) => (\r\n              <option key={soiltype} value={soiltype}>\r\n                {soiltype}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n\r\n          <TextField\r\n            id=\"crop_type\"\r\n            name=\"crop_type\"\r\n            select\r\n            label=\"Crop Type\"\r\n            value={formData.crop_type}\r\n            onChange={(e) => handleChange(e, \"crop_type\")}\r\n            SelectProps={{\r\n              native: true,\r\n            }}\r\n            variant=\"filled\"\r\n            className=\"form__text_field\"\r\n          >\r\n            <option key={\"select\"} value={\"select\"}>\r\n              {\"Select\"}\r\n            </option>\r\n            {cropTypes.map((croptype) => (\r\n              <option key={croptype} value={croptype}>\r\n                {croptype}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n\r\n          <Button\r\n            onClick={() => handleClick()}\r\n            className=\"form__button\"\r\n            style={{backgroundColor: '#077329'}}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Predict Fertilizer\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FertilizerRecommender;\r\n"]},"metadata":{},"sourceType":"module"}