{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\React\\\\AgriAI_WebApp-main-2\\\\AgriAI_WebApp-main\\\\React_Frontend\\\\agri-ai\\\\src\\\\components\\\\FertilizerRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\";\nimport Alert from '@material-ui/lab/Alert';\nimport \"../styles/croprecommenderoutput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FertilizerRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    Temparature: \"\",\n    Humidity: \"\",\n    Moisture: \"\",\n    soil_type: \"select\",\n    crop_type: \"select\",\n    Nitrogen: \"\",\n    Potassium: \"\",\n    Phosphorous: \"\"\n  });\n  const [predictionData, setPredictionData] = useState({});\n  const [loadingStatus, setLoadingStatus] = useState(false);\n  const formRenderData = [{\n    name: \"Nitrogen\",\n    description: \"Amount Of Nitrogen in Soil\"\n  }, {\n    name: \"Potassium\",\n    description: \"Amount of Potassium in Soil\"\n  }, {\n    name: \"Phosphorous\",\n    description: \"Amount of Phosphorous in Soil\"\n  }, {\n    name: \"Temparature\",\n    description: \"Temperature (in Celcius)\"\n  }, {\n    name: \"Humidity\",\n    description: \"Humidity (in %)\"\n  }, {\n    name: \"Moisture\",\n    description: \"Moisture in Soil\"\n  }];\n  const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey'];\n  const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts'];\n\n  const handleChange = (e, changeKey = undefined) => {\n    // console.log(changeKey, e.target.value)\n    let newData = { ...formData\n    };\n\n    if (changeKey) {\n      newData[changeKey] = e.target.value;\n    } else newData[e.target.id] = e.target.value;\n\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    const response = await api.post(\"/predict_fertilizer\", request);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + 'assets/FertilizerRecomender.jpg'})`\n    },\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__form_group\",\n        children: [predictionData.error && /*#__PURE__*/_jsxDEV(Alert, {\n          style: {\n            marginTop: \"20px\"\n          },\n          severity: \"error\",\n          children: [\" \", predictionData.error, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__title\",\n            children: \"Fertilizer Recommender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), formRenderData.map(formAttribute => {\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => handleChange(e),\n            value: formData[formAttribute.name],\n            className: \"form__text_field\",\n            id: formAttribute.name,\n            name: formAttribute.name,\n            variant: \"filled\",\n            label: formAttribute.description\n          }, formAttribute.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 36\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"soil_type\",\n          name: \"soil_type\",\n          select: true,\n          label: \"Soil Type\",\n          value: formData.soil_type,\n          onChange: e => handleChange(e, \"soil_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), soilTypes.map(soiltype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: soiltype,\n            children: soiltype\n          }, soiltype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"soil_type\",\n          name: \"soil_type\",\n          select: true,\n          label: \"Crop Type\",\n          value: formData.crop_type,\n          onChange: e => handleChange(e, \"crop_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), cropTypes.map(croptype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: croptype,\n            children: croptype\n          }, croptype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(),\n          className: \"form__button\",\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Predict Fertilizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FertilizerRecommender, \"Nop9DJKnc2cYwYK9mdd3H3kaPgw=\");\n\n_c = FertilizerRecommender;\nexport default FertilizerRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"FertilizerRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/React/AgriAI_WebApp-main-2/AgriAI_WebApp-main/React_Frontend/agri-ai/src/components/FertilizerRecommender.js"],"names":["React","useState","Button","TextField","api","Alert","FertilizerRecommender","formData","setFormData","Temparature","Humidity","Moisture","soil_type","crop_type","Nitrogen","Potassium","Phosphorous","predictionData","setPredictionData","loadingStatus","setLoadingStatus","formRenderData","name","description","soilTypes","cropTypes","handleChange","e","changeKey","undefined","newData","target","value","id","handleClick","request","FormData","key","append","response","post","responseData","data","backgroundImage","process","env","PUBLIC_URL","error","marginTop","map","formAttribute","native","soiltype","croptype"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\"\nimport Alert from '@material-ui/lab/Alert';\nimport \"../styles/croprecommenderoutput.css\"\n\nfunction FertilizerRecommender() {\n    const [formData, setFormData] = useState({\n        Temparature:\"\",\n        Humidity:\"\",\n        Moisture:\"\",\n        soil_type:\"select\",\n        crop_type:\"select\",\n        Nitrogen:\"\",\n        Potassium:\"\",\n        Phosphorous:\"\",\n    })\n\n    const [predictionData, setPredictionData] = useState({})\n\n    const [loadingStatus, setLoadingStatus] = useState(false)\n    \n\n    const formRenderData = [\n        {\n           name:\"Nitrogen\",\n           description:\"Amount Of Nitrogen in Soil\"\n        },\n        {\n            name:\"Potassium\",\n            description:\"Amount of Potassium in Soil\"\n         },\n         {\n            name:\"Phosphorous\",\n            description:\"Amount of Phosphorous in Soil\"\n         },\n         {\n            name:\"Temparature\",\n            description:\"Temperature (in Celcius)\"\n         },\n         {\n            name:\"Humidity\",\n            description:\"Humidity (in %)\"\n         },\n         {\n            name:\"Moisture\",\n            description:\"Moisture in Soil\"\n         }\n    ]\n\n    const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey']\n    const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts']\n\n    const handleChange = (e, changeKey=undefined) => {\n        // console.log(changeKey, e.target.value)\n        let newData = {...formData}\n        if(changeKey) {\n            newData[changeKey] = e.target.value\n        }\n        else newData[e.target.id] = e.target.value\n        setFormData(newData)\n    }\n\n    const handleClick = async () => {\n\n        setLoadingStatus(true)\n        \n        const request = new FormData()\n\n        for(let key in formData) {\n            request.append(key, formData[key])\n        }\n\n        const response = await api.post(\n            \"/predict_fertilizer\",\n            request\n        )\n        \n        const responseData = response.data\n        setPredictionData(responseData)\n        setLoadingStatus(false)\n    }\n\n    \n    return (\n        <div style={{backgroundImage:`url(${process.env.PUBLIC_URL + 'assets/FertilizerRecomender.jpg'})`}} className=\"container\">\n            <div className=\"form\">\n                <div className=\"form__form_group\">\n\n                    {\n                        predictionData.error && \n                        <Alert style={{marginTop:\"20px\"}} severity=\"error\"> { predictionData.error } </Alert>\n                    }\n\n                    <center><div className=\"form__title\">Fertilizer Recommender</div></center>\n\n                    {\n                        formRenderData.map((formAttribute) => {\n                            return <TextField\n                            key={formAttribute.name} \n                            onChange={(e) => handleChange(e)}\n                            value={formData[formAttribute.name]}\n                            className=\"form__text_field\"\n                            id={formAttribute.name}\n                            name={formAttribute.name}\n                            variant=\"filled\"\n                            label={formAttribute.description}\n                            />\n                        })\n                    }\n\n\n                    <TextField\n                        id=\"soil_type\"\n                        name=\"soil_type\"\n                        select\n                        label=\"Soil Type\"\n                        value={formData.soil_type}\n                        onChange={(e) => handleChange(e, \"soil_type\")}\n                        SelectProps={{\n                            native: true,\n                        }}\n                        variant=\"filled\"\n                        className=\"form__text_field\"\n                        >\n                        <option key={\"select\"} value={\"select\"}>\n                        {\"Select\"}\n                        </option>\n                        {soilTypes.map((soiltype) => (\n                            <option key={soiltype} value={soiltype}>\n                            {soiltype}\n                            </option>\n                        ))}\n                    </TextField>\n\n\n                    <TextField\n                        id=\"soil_type\"\n                        name=\"soil_type\"\n                        select\n                        label=\"Crop Type\"\n                        value={formData.crop_type}\n                        onChange={(e) => handleChange(e, \"crop_type\")}\n                        SelectProps={{\n                            native: true,\n                        }}\n                        variant=\"filled\"\n                        className=\"form__text_field\"\n                        >\n                        <option key={\"select\"} value={\"select\"}>\n                        {\"Select\"}\n                        </option>\n                        {cropTypes.map((croptype) => (\n                            <option key={croptype} value={croptype}>\n                            {croptype}\n                            </option>\n                        ))}\n                    </TextField>\n\n                    <Button onClick={()=>handleClick()} className=\"form__button\" color=\"primary\" variant=\"contained\">Predict Fertilizer</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FertilizerRecommender\n"]},"metadata":{},"sourceType":"module"}