{"ast":null,"code":"var _jsxFileName = \"D:\\\\IIT\\\\Subjects\\\\DSGP Project\\\\Frontend\\\\src\\\\components\\\\FertilizerRecommender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\";\nimport Alert from '@material-ui/lab/Alert';\nimport \"../styles/croprecommenderoutput.css\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport \"../styles/croprecommenderoutput.css\";\nimport { fertilizerData } from \"./Data\";\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"280px\",\n    backgroundColor: \"whitesmoke\"\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  root: {\n    maxWidth: 550\n  },\n  table: {\n    minWidth: 450\n  }\n}));\n\nfunction FertilizerRecommender() {\n  _s();\n\n  const [formData, setFormData] = useState({\n    Temparature: \"\",\n    Humidity: \"\",\n    Moisture: \"\",\n    soil_type: \"select\",\n    crop_type: \"select\",\n    Nitrogen: \"\",\n    Potassium: \"\",\n    Phosphorous: \"\"\n  });\n  const [predictionData, setPredictionData] = useState({});\n  const [loadingStatus, setLoadingStatus] = useState(false);\n  const classes = useStyles();\n  const formRenderData = [{\n    name: \"Nitrogen\",\n    description: \"Amount Of Nitrogen in Soil\"\n  }, {\n    name: \"Potassium\",\n    description: \"Amount of Potassium in Soil\"\n  }, {\n    name: \"Phosphorous\",\n    description: \"Amount of Phosphorous in Soil\"\n  }, {\n    name: \"Temparature\",\n    description: \"Temperature (in Celcius)\"\n  }, {\n    name: \"Humidity\",\n    description: \"Humidity (in %)\"\n  }, {\n    name: \"Moisture\",\n    description: \"Moisture in Soil\"\n  }];\n  const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey'];\n  const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts'];\n\n  const handleChange = (e, changeKey = undefined) => {\n    // console.log(changeKey, e.target.value)\n    let newData = { ...formData\n    };\n\n    if (changeKey) {\n      newData[changeKey] = e.target.value;\n    } else newData[e.target.id] = e.target.value;\n\n    setFormData(newData);\n  };\n\n  const handleClick = async () => {\n    setLoadingStatus(true);\n    const request = new FormData();\n\n    for (let key in formData) {\n      request.append(key, formData[key]);\n    }\n\n    const response = await api.post(\"/predict_fertilizer\", request);\n    const responseData = response.data;\n    setPredictionData(responseData);\n    setLoadingStatus(false);\n  };\n\n  const handleBackClick = () => {\n    setPredictionData({});\n  };\n\n  const predictedFertilizer = fertilizerData[predictionData.final_prediction];\n\n  if (predictionData.final_prediction) {\n    const outputComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output_container\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: `${classes.root} output_container__card`,\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          component: \"img\",\n          alt: predictedFertilizer.title,\n          height: \"225\",\n          image: predictedFertilizer.imageUrl,\n          title: predictedFertilizer.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h5\",\n            component: \"h2\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Prediction: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), predictedFertilizer.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            component: \"p\",\n            children: predictedFertilizer.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n            component: Paper,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              className: classes.table,\n              \"aria-label\": \"simple table\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    component: \"th\",\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"Model Prediction\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 78\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: [predictionData.fert_model_prediction, \" (\", predictionData.fert_model_probability, \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleBackClick(),\n            className: \"back__button\",\n            variant: \"contained\",\n            size: \"small\",\n            color: \"primary\",\n            children: \"Back to Prediction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n\n    return outputComponent;\n  } else if (loadingStatus) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 16\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + 'assets/FertilizerRecomender.jpg'})`,\n      height: '101%'\n    },\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__form_group\",\n        children: [predictionData.error && /*#__PURE__*/_jsxDEV(Alert, {\n          style: {\n            marginTop: \"20px\"\n          },\n          severity: \"error\",\n          children: [\" \", predictionData.error, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__title\",\n            children: \"Fertilizer Recommender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), formRenderData.map(formAttribute => {\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => handleChange(e),\n            value: formData[formAttribute.name],\n            className: \"form__text_field\",\n            id: formAttribute.name,\n            name: formAttribute.name,\n            variant: \"filled\",\n            label: formAttribute.description\n          }, formAttribute.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 36\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"soil_type\",\n          name: \"soil_type\",\n          select: true,\n          label: \"Soil Type\",\n          value: formData.soil_type,\n          onChange: e => handleChange(e, \"soil_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), soilTypes.map(soiltype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: soiltype,\n            children: soiltype\n          }, soiltype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"soil_type\",\n          name: \"soil_type\",\n          select: true,\n          label: \"Crop Type\",\n          value: formData.crop_type,\n          onChange: e => handleChange(e, \"crop_type\"),\n          SelectProps: {\n            native: true\n          },\n          variant: \"filled\",\n          className: \"form__text_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"select\",\n            children: \"Select\"\n          }, \"select\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), cropTypes.map(croptype => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: croptype,\n            children: croptype\n          }, croptype, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(),\n          className: \"form__button\",\n          style: {\n            backgroundColor: '#077329'\n          },\n          variant: \"contained\",\n          children: \"Predict Fertilizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FertilizerRecommender, \"bvCR0gaMYNTcwYMQlawOUueexlw=\", false, function () {\n  return [useStyles];\n});\n\n_c = FertilizerRecommender;\nexport default FertilizerRecommender;\n\nvar _c;\n\n$RefreshReg$(_c, \"FertilizerRecommender\");","map":{"version":3,"sources":["D:/IIT/Subjects/DSGP Project/Frontend/src/components/FertilizerRecommender.js"],"names":["React","useState","Button","TextField","api","Alert","makeStyles","Card","CardActions","CardContent","CardMedia","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","fertilizerData","Loading","useStyles","theme","formControl","margin","spacing","width","backgroundColor","selectEmpty","marginTop","root","maxWidth","table","minWidth","FertilizerRecommender","formData","setFormData","Temparature","Humidity","Moisture","soil_type","crop_type","Nitrogen","Potassium","Phosphorous","predictionData","setPredictionData","loadingStatus","setLoadingStatus","classes","formRenderData","name","description","soilTypes","cropTypes","handleChange","e","changeKey","undefined","newData","target","value","id","handleClick","request","FormData","key","append","response","post","responseData","data","handleBackClick","predictedFertilizer","final_prediction","outputComponent","title","imageUrl","fert_model_prediction","fert_model_probability","backgroundImage","process","env","PUBLIC_URL","height","error","map","formAttribute","native","soiltype","croptype"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, TextField } from '@material-ui/core';\nimport api from \"../api/recommenderapi\"\nimport Alert from '@material-ui/lab/Alert';\nimport \"../styles/croprecommenderoutput.css\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport \"../styles/croprecommenderoutput.css\"\nimport {fertilizerData} from \"./Data\"\nimport Loading from './Loading';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      width: \"280px\",\n      backgroundColor: \"whitesmoke\",\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    root: {\n        maxWidth: 550,\n    },\n    table: {\n        minWidth: 450,\n    },\n}));\n\nfunction FertilizerRecommender() {\n    const [formData, setFormData] = useState({\n        Temparature:\"\",\n        Humidity:\"\",\n        Moisture:\"\",\n        soil_type:\"select\",\n        crop_type:\"select\",\n        Nitrogen:\"\",\n        Potassium:\"\",\n        Phosphorous:\"\",\n    })\n\n    const [predictionData, setPredictionData] = useState({})\n\n    const [loadingStatus, setLoadingStatus] = useState(false)\n    \n    const classes = useStyles();\n\n    const formRenderData = [\n        {\n           name:\"Nitrogen\",\n           description:\"Amount Of Nitrogen in Soil\"\n        },\n        {\n            name:\"Potassium\",\n            description:\"Amount of Potassium in Soil\"\n         },\n         {\n            name:\"Phosphorous\",\n            description:\"Amount of Phosphorous in Soil\"\n         },\n         {\n            name:\"Temparature\",\n            description:\"Temperature (in Celcius)\"\n         },\n         {\n            name:\"Humidity\",\n            description:\"Humidity (in %)\"\n         },\n         {\n            name:\"Moisture\",\n            description:\"Moisture in Soil\"\n         }\n    ]\n\n    const soilTypes = ['Sandy', 'Loamy', 'Black', 'Red', 'Clayey']\n    const cropTypes = ['Maize', 'Sugarcane', 'Cotton', 'Tobacco', 'Paddy', 'Barley', 'Wheat', 'Millets', 'Oil seeds', 'Pulses', 'Ground Nuts']\n\n    const handleChange = (e, changeKey=undefined) => {\n        // console.log(changeKey, e.target.value)\n        let newData = {...formData}\n        if(changeKey) {\n            newData[changeKey] = e.target.value\n        }\n        else newData[e.target.id] = e.target.value\n        setFormData(newData)\n    }\n\n    const handleClick = async () => {\n\n        setLoadingStatus(true)\n        \n        const request = new FormData()\n\n        for(let key in formData) {\n            request.append(key, formData[key])\n        }\n\n        const response = await api.post(\n            \"/predict_fertilizer\",\n            request\n        )\n        \n        const responseData = response.data\n        setPredictionData(responseData)\n        setLoadingStatus(false)\n    }\n\n    const handleBackClick = () => {\n        setPredictionData({})\n    }\n\n    const predictedFertilizer = fertilizerData[predictionData.final_prediction]\n\n    if (predictionData.final_prediction) {\n\n        const outputComponent = (\n\n\n            <div className=\"output_container\">\n                <Card className={`${classes.root} output_container__card`}>\n                    {/* <CardActionArea> */}\n                        <CardMedia\n                        component=\"img\"\n                        alt={predictedFertilizer.title}\n                        height=\"225\"\n                        image={predictedFertilizer.imageUrl}\n                        title={predictedFertilizer.title}\n                        />\n                        <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            <b>Prediction: </b>{predictedFertilizer.title}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            {predictedFertilizer.description}\n                        </Typography>\n                        <br/>\n    \n                        <TableContainer component={Paper}>\n                            <Table className={classes.table} aria-label=\"simple table\">\n                                <TableHead>\n                                <TableRow>\n                                    <TableCell component=\"th\" align=\"center\"><b>Model Prediction</b></TableCell>\n                                </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell align=\"center\">{predictionData.fert_model_prediction} ({predictionData.fert_model_probability}%)</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n    \n                        </CardContent>\n                    {/* </CardActionArea> */}\n                    <CardActions>\n                        <Button onClick={()=>handleBackClick()} className=\"back__button\" variant=\"contained\" size=\"small\" color=\"primary\">\n                        Back to Prediction\n                        </Button>\n                    </CardActions>\n                </Card>\n            </div>\n        )\n\n        return outputComponent\n\n\n    }\n\n    else if(loadingStatus) {\n        return <Loading />\n    }\n\n\n    else return (\n        <div style={{backgroundImage:`url(${process.env.PUBLIC_URL + 'assets/FertilizerRecomender.jpg'})`, height:'101%'}} className=\"container\">\n            <div className=\"form\">\n                <div className=\"form__form_group\">\n\n                    {\n                        predictionData.error && \n                        <Alert style={{marginTop:\"20px\"}} severity=\"error\"> { predictionData.error } </Alert>\n                    }\n\n                    <center><div className=\"form__title\">Fertilizer Recommender</div></center>\n\n                    {\n                        formRenderData.map((formAttribute) => {\n                            return <TextField\n                            key={formAttribute.name} \n                            onChange={(e) => handleChange(e)}\n                            value={formData[formAttribute.name]}\n                            className=\"form__text_field\"\n                            id={formAttribute.name}\n                            name={formAttribute.name}\n                            variant=\"filled\"\n                            label={formAttribute.description}\n                            />\n                        })\n                    }\n\n\n                    <TextField\n                        id=\"soil_type\"\n                        name=\"soil_type\"\n                        select\n                        label=\"Soil Type\"\n                        value={formData.soil_type}\n                        onChange={(e) => handleChange(e, \"soil_type\")}\n                        SelectProps={{\n                            native: true,\n                        }}\n                        variant=\"filled\"\n                        className=\"form__text_field\"\n                        >\n                        <option key={\"select\"} value={\"select\"}>\n                        {\"Select\"}\n                        </option>\n                        {soilTypes.map((soiltype) => (\n                            <option key={soiltype} value={soiltype}>\n                            {soiltype}\n                            </option>\n                        ))}\n                    </TextField>\n\n\n                    <TextField\n                        id=\"soil_type\"\n                        name=\"soil_type\"\n                        select\n                        label=\"Crop Type\"\n                        value={formData.crop_type}\n                        onChange={(e) => handleChange(e, \"crop_type\")}\n                        SelectProps={{\n                            native: true,\n                        }}\n                        variant=\"filled\"\n                        className=\"form__text_field\"\n                        >\n                        <option key={\"select\"} value={\"select\"}>\n                        {\"Select\"}\n                        </option>\n                        {cropTypes.map((croptype) => (\n                            <option key={croptype} value={croptype}>\n                            {croptype}\n                            </option>\n                        ))}\n                    </TextField>\n\n                    <Button onClick={()=>handleClick()} className=\"form__button\" style={{backgroundColor: '#077329'}} variant=\"contained\">Predict Fertilizer</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FertilizerRecommender\n"]},"metadata":{},"sourceType":"module"}